type Profile @model
@auth(rules: [
  {allow: public, provider: identityPool, operations: [read]}
  { allow: owner, ownerField: "owner" },
  { allow: groups, groups: ["Admins"], operations: [read, create, update, delete] },
  { allow: groups, groups: ["Members"], operations: [read] },
]) {
  id: ID! @primaryKey
  pseudo: String! @index(name: "byPseudo", queryField: "profileByPseudo")
  name: String
  surname: String
  avatar: String
  description: String
  birthdate: AWSDate
  recipes: [Recipe] @hasMany
  tags: [Tag] @manyToMany(relationName: "TagProfiles")
  owner: String @auth(rules: [{ allow: groups, groups: ["Admins"] }, { allow: groups, groups: ["Members"], operations: [read] }, { allow: owner, ownerField: "owner", operations: [read] }, {allow: public, provider: identityPool, operations: [read]}])
}


type Recipe @model @auth(rules: [
  { allow: public, provider: identityPool, operations: [read] },
  { allow: owner, ownerField: "owner" },
  { allow: groups, groups: ["Admins"], operations: [read, create, update, delete] },
  { allow: groups, groups: ["Members"], operations: [read] }
]) {
  id: ID!
  title: String! @index(name: "byTitle", queryField: "RecipeByTitle")
  slug: String! @index(name: "bySlug", queryField: "RecipeBySlug", sortKeyFields: ["owner"])
  image: String
  steps: AWSJSON
  description: String
  ingredients: [RecipeIngredient] @hasMany
  category: Category @hasOne
  owner: String @index(name: "byOwner", queryField: "RecipeByOwner") @auth(rules: [{ allow: groups, groups: ["Admins"] }, { allow: groups, groups: ["Members"], operations: [read] }, { allow: owner, ownerField: "owner", operations: [read] }, {allow: public, provider: identityPool, operations: [read]}])
  profileID: ID!
  user: Profile @belongsTo(fields: ["profileID"])
  tags: [Tag] @manyToMany(relationName: "TagRecipes")
}


type Ingredient @model @auth(rules: [
  {allow: public, provider: identityPool, operations: [read]}
  {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]},
  {allow: groups, groups: ["Members"], operations: [read]},
]) {
  id: ID!
  name: String!
  typeID: String!
  type: IngredientType @hasOne
}

type IngredientType @model @auth(rules: [
  {allow: public, provider: identityPool, operations: [read]}
  {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]},
  {allow: groups, groups: ["Members"], operations: [read]},
]) {
  id: ID!
  name: String!
}

type Category @model @auth(rules: [
  {allow: public, provider: identityPool, operations: [read]}
  {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]},
  {allow: groups, groups: ["Members"], operations: [read]},
]) {
  id: ID!
  name: String! @index(name: "byName", queryField: "CategoryByname")
  slug: String! @index(name: "bySlug", queryField: "CategoryBySlug")
  recipes: [Recipe] @hasMany
}

type RecipeIngredient @model @auth(rules: [
  {allow: public, provider: identityPool, operations: [read]}
  {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]},
  {allow: groups, groups: ["Members"], operations: [read, create]},
]) {
  id: ID!
  quantity: String
  ingredient: Ingredient @hasOne
}

type Tag @model @auth(rules: [
  {allow: public, provider: identityPool, operations: [read]}
  {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]},
  {allow: groups, groups: ["Members"], operations: [read]},
]) {
  id: ID!
  label: String! @index(name: "byLabel", queryField: "TagByLabel")
  profiles: [Profile] @manyToMany(relationName: "TagProfiles")
  recipes: [Recipe] @manyToMany(relationName: "TagRecipes")
}