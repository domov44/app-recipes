type Profile @model
@auth(rules: [
  {allow: public, provider: apiKey, operations: [read]}
  { allow: owner, ownerField: "owner" },
  { allow: groups, groups: ["Admins"], operations: [read, create, update, delete] },
  { allow: groups, groups: ["Members"], operations: [read] },
]) {
  id: ID! @primaryKey
  pseudo: String! @index(name: "byPseudo", queryField: "profileByPseudo")
  name: String!
  surname: String!
  avatar: String
  description: String
  birthdate: AWSDate
  recipes: [Recipe] @hasMany
  owner: String
}


type Recipe @model @auth(rules: [
  {allow: public, provider: apiKey, operations: [read]}
  {allow: owner, ownerField: "owner"},
  {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]},
  {allow: groups, groups: ["Members"], operations: [read]},
]) {
  id: ID!
  title: String! @index(name: "byTitle", queryField: "RecipeByTitle")
  image: String
  user: Profile @hasOne
  steps: AWSJSON
  description: String
  ingredients: [RecipeIngredient] @hasMany
  category: Category @hasOne
  owner: String
}

type Ingredient @model @auth(rules: [
  {allow: public, provider: apiKey, operations: [read]}
  {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]},
  {allow: groups, groups: ["Members"], operations: [read]},
]) {
  id: ID!
  name: String!
  typeID: String!
  type: IngredientType @hasOne
}

type IngredientType @model @auth(rules: [
  {allow: public, provider: apiKey, operations: [read]}
  {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]},
  {allow: groups, groups: ["Members"], operations: [read]},
]) {
  id: ID!
  name: String!
}

type Category @model @auth(rules: [
  {allow: public, provider: apiKey, operations: [read]}
  {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]},
  {allow: groups, groups: ["Members"], operations: [read]},
]) {
  id: ID!
  name: String! @index(name: "byName", queryField: "CategoryByname")
  recipes: [Recipe] @hasMany
}

type RecipeIngredient @model @auth(rules: [
  {allow: public, provider: apiKey, operations: [read]}
  {allow: groups, groups: ["Admins"], operations: [read, create, update, delete]},
  {allow: groups, groups: ["Members"], operations: [read]},
]) {
  id: ID!
  quantity: String
  ingredient: Ingredient @hasOne
}